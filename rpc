#!/usr/bin/env python
# -*- coding: utf-8 -*-
import xmlrpclib,urllib2
import os,sys,json,datetime,logging,re
PORT=os.environ.get('PORT_WWW') or os.environ.get('PORT_PROXY') or 80
JSON_RPC_URL='http://localhost:%s/API/JSONRPC'%PORT
#JSON_RPC_URL='http://mtapfile.herokuapp.com/API/JSONRPC'

def sizeof_fmt(num):
    for x in ['bytes','KB','MB','GB','TB']:
        if num < 1024.0:
            return "%3.2f%s" % (num, x)
        num /= 1024.0

class Aria2c:
    def __init__(self):
        self.proxy=xmlrpclib.ServerProxy('http://localhost:6800/rpc')

    def actives(self):
        tasks=self.proxy.aria2.tellActive()
        print '+++++++active tasks++++++'
        for t in tasks:
            total=int(t['totalLength'])
            completed=int(t['completedLength'])
            speed=int(t['downloadSpeed'])
            secs=(total-completed)/speed if speed else 86400
            delta=datetime.timedelta(seconds=secs)
            for f in t['files']:
                print os.path.basename(f['path'])
            print t['gid'],delta,"\t%dk/s"%(speed/1024),"\t%s/%s"%(sizeof_fmt(completed),sizeof_fmt(total))
            print '==================================================='

    def remove(self,gid):
        self.proxy.aria2.remove(gid)

    def addUri(self,uris,options=None):
        if not isinstance(uris,list):
            uris=[uris]
        if options:
            self.proxy.aria2.addUri(uris,options)
        else:
            self.proxy.aria2.addUri(uris)

    def addTorrent(self,torrent):
        self.proxy.aria2.addTorrent(xmlrpclib.Binary(open(torrent).read()))


def parseInput(filepath):
    downloads=[]
    dl={}
    for line in open(filepath,'rb'):
        if line[:4]=='http':
            #download url
            url=line.strip()
            if dl.get('url'):
                downloads.append(dl)
                dl={}
            dl['url']=url
        elif (line[0]==' ' or line[0]=='\t') and line.find('=')>0:
            #options
            k,_,v=line.strip().partition('=')
            if k not in dl:
                dl[k]=v
            else:
                oldvalue=dl[k]
                if isinstance(oldvalue,list):
                    oldvalue.append(v)
                else:
                    dl[k]=[oldvalue,v]
    if dl.get('url'):
        downloads.append(dl)

    return downloads


def jsonRPC(method,params=None,endpoint=JSON_RPC_URL):
    if not isinstance(method,str):
        raise Exception('Invalid method supplied for jsonRPC request')
    data={'jsonrpc':'2.0','id':1,'method':method}
    if params:data['params']=params
    req=urllib2.Request(endpoint,json.dumps(data),{'Content-Type':'application/json'})
    try:
        res=urllib2.urlopen(req)
        return json.loads(res.read())
    except Exception as e:
        logging.exception(e)
        return None

class HttpTask:
    @staticmethod
    def remove(id):
        rtn=jsonRPC('httptask.deleteTask',[id])
        if not rtn:return
        if 'error' in rtn:
            logging.error('failed to remove %s:%s',id,rtn['error']['message'])
        else:
            logging.info('remove task %s',id)

    @staticmethod
    def abort(id):
        rtn=jsonRPC('httptask.abortTask',[id])
        if not rtn:return
        if 'error' in rtn:
            logging.error('failed to abort %s:%s',id,rtn['error']['message'])
        else:
            logging.info('abort task %s',id)

    @staticmethod
    def pause(id):
        rtn=jsonRPC('httptask.pauseTask',[id])
        if not rtn:return
        if 'error' in rtn:
            logging.error('failed to pause %s:%s',id,rtn['error']['message'])
        else:
            logging.info('pause task %s',id)

    @staticmethod
    def list(status=0):
        rtn=jsonRPC('httptask.listTask',[status])
        if not rtn:return
        if 'error' in rtn:
            return logging.error('failed to list task:%s',rtn['error']['message'])

        list=rtn['result'].get('data');
        logging.info('*********************************************')
        if not list or len(list)==0:
            logging.info('currently no active tasks')
        else:
            for e in list:
                logging.info(e)
                logging.info('=========================================')

    @staticmethod
    def add(argv):
        if argv[0]=='-i':
            filepath=argv[1]
            for payload in parseInput(filepath):
                url=payload['url']
                del payload['url']
                rtn=jsonRPC('proxy.download',[url,payload])
                if not rtn:return
                if 'error' in rtn:
                    logging.error('failed to add %s:%s',url,rtn['error']['message'])
                else:
                    logging.info('added: %s',url)
        else:
            url=argv[0]
            rtn=jsonRPC('proxy.download',[url])
            if not rtn:return
            if 'error' in rtn:
                logging.error('failed to add %s:%s',url,rtn['error']['message'])
            else:
                logging.info('added: %s',url)



def execute(method,uri):
    #check filepath exists
    if not uri: return logging.warn('uri must provide')
    if re.match('^http://|^https://',uri):
        rtn=jsonRPC(method,[uri])
    elif os.path.exists(uri):
        uri=os.path.abspath(uri)
        rtn=jsonRPC(method,[uri])
    else:
        return logging.warn('uri not valid:%s',uri)
    if not rtn:return
    if 'error' in rtn:
        logging.error('upload failed:%s',rtn['error']['message'])
    else:
        logging.info(rtn['result'])

def aria2c_rpc(argv):
    rpc=Aria2c()
    if len(argv)==0:
        rpc.actives()
    elif len(argv)==1:
        url=argv[0]
        if url[:7]=='http://' or url[:8]=='https://' or url[:6]=='ftp://' or url[:7]=='magnet:':
            rpc.addUri(url)
            logging.info('download: %s',url)
        else:
            logging.warn('not uri: %s',url)
    elif len(argv)==2 and argv[0]=='del' :
        rpc.remove(argv[1])
    elif len(argv)==2 and argv[0]=='-i':
        filepath=argv[1]
        for d in parseInput(filepath):
            url=d['url']
            del d['url']
            rpc.addUri(url,d)
    elif len(argv)==2 and argv[0]=='--torrent':
        filepath=argv[1]
        rpc.addTorrent(filepath)
    else:
        logging.warn('unknow options: %s',argv)

if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG, format='%(message)s')
    argv=sys.argv
    if len(argv)==1:
        logging.warn('need more params'); exit()
    action=argv[1]
    params=argv[2] if len(argv)>2 else None
    if 'ls'==action:
        status=int(params) if params else 10
        HttpTask.list(status)
    elif 'abort'==action:
        HttpTask.abort(int(params))
    elif 'pause'==action:
        HttpTask.pause(int(params))
    elif 'del'==action:#back compatible
        HttpTask.remove(int(params))
    elif 'remove'==action:
        HttpTask.remove(int(params))
    elif 'add'==action:
        HttpTask.add(argv[2:])
    elif 'aria2c'==action:
        aria2c_rpc(argv[2:])
    elif '115.download'==action:
        rtn=jsonRPC(action,[argv[2],{'username':argv[3],'password':argv[4]}])
        logging.info(rtn)
    elif 'xunlei.scan'==action:
        rtn=jsonRPC(action,argv[2:])
        logging.info(rtn)
    elif re.search(r'download$|upload$',action):
        execute(action,params)
    else:
        logging.info('unknow parameters:%s',argv)
        logging.info('only support the following commands')
        logging.info('rpc ls\nrpc del <taskid>\nrpc abort <taskid>\nrpc add <url>\nrpc add -i <file>')
        logging.info('********************************************')
        logging.info('rpc aria2c\nrpc aria2c <url>\nrpc aria2c -i <input file>\nrpc aria2c --torrent <torrent file>')

