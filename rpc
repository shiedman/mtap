#!/usr/bin/env python
# -*- coding: utf-8 -*-
import xmlrpclib,urllib2
import os,sys,json,datetime,logging,re
def sizeof_fmt(num):
    for x in ['bytes','KB','MB','GB','TB']:
        if num < 1024.0:
            return "%3.2f%s" % (num, x)
        num /= 1024.0

class Aria2:
    def __init__(self):
        self.proxy=xmlrpclib.ServerProxy('http://localhost:6800/rpc')

    def actives(self):
        tasks=self.proxy.aria2.tellActive()
        print '+++++++active tasks++++++'
        for t in tasks:
            total=int(t['totalLength'])
            completed=int(t['completedLength'])
            speed=int(t['downloadSpeed'])
            secs=(total-completed)/speed if speed else 86400
            delta=datetime.timedelta(seconds=secs)
            for f in t['files']:
                print os.path.basename(f['path'])
            print t['gid'],delta,"\t%dk/s"%(speed/1024),"\t%s/%s"%(sizeof_fmt(completed),sizeof_fmt(total))
            print '==================================================='

    def stops(self):
        tasks=self.proxy.aria2.tellStopped(0,10)
        print '+++++++stopped tasks++++++'
        for t in tasks:
            total=int(t['totalLength'])
            completed=int(t['completedLength'])
            for f in t['files']:
                print os.path.basename(f['path'])
            print t['gid'],'--','--',"%s/%s"%(sizeof_fmt(completed),sizeof_fmt(total))
            print '==================================================='

    def remove(self,gid):
        self.proxy.aria2.remove(gid)

    def addUri(self,uris,options=None):
        if not isinstance(uris,list):
            uris=[uris]
        if options:
            self.proxy.aria2.addUri(uris,options)
        else:
            self.proxy.aria2.addUri(uris)

    def addTorrent(self,torrent):
        self.proxy.aria2.addTorrent(xmlrpclib.Binary(open(torrent).read()))


PORT=os.environ.get('PORT_WWW') or os.environ.get('PORT_PROXY') or 80
JSON_RPC_URL='http://localhost:%s/API/JSONRPC'%PORT
def jsonRPC(method,params=None,endpoint=JSON_RPC_URL):
    if not isinstance(method,str):
        raise Exception('Invalid method supplied for jsonRPC request')
    data={'jsonrpc':'2.0','id':1,'method':method}
    if params:data['params']=params
    req=urllib2.Request(endpoint,json.dumps(data),{'Content-Type':'application/json'})
    try:
        res=urllib2.urlopen(req)
        return json.loads(res.read())
    except Exception as e:
        logging.exception(e)
        return None

class HttpTask:
    @staticmethod
    def remove(id):
        rtn=jsonRPC('httptask.deleteTask',{'taskid':id})
        if not rtn:return
        if 'error' in rtn:
            logging.error('failed to remove %s:%s',id,rtn['error']['message'])
        else:
            logging.info('remove task %s',id)

    @staticmethod
    def abort(id):
        rtn=jsonRPC('httptask.abortTask',{'taskid':id})
        if not rtn:return
        if 'error' in rtn:
            logging.error('failed to abort %s:%s',id,rtn['error']['message'])
        else:
            logging.info('abort task %s',id)

    @staticmethod
    def list(status=0):
        rtn=jsonRPC('httptask.listTask',{'status':status})
        if not rtn:return
        if 'error' in rtn:
            return logging.error('failed to list task:%s',rtn['error']['message'])

        list=rtn['result'].get('data');
        logging.info('*********************************************')
        if not list or len(list)==0:
            logging.info('currently no active tasks')
        else:
            for e in list:
                logging.info(e)
                logging.info('=========================================')

def upload(filepath,method):
    #check filepath exists
    if not filepath or not os.path.exists(filepath):
        return logging.warn('filepath not exists')
    filepath=os.path.abspath(filepath)
    rtn=jsonRPC(method,{'file':filepath})
    if not rtn:return
    if 'error' in rtn:
        logging.error('upload failed:%s',rtn['error']['message'])
    else:
        logging.info('uploading file:%s',filepath)

def aria2_rpc(argv):
    rpc=Aria2()
    act=argv[0]
    if act=='ls':
        rpc.actives()
    elif act=='stop':
        rpc.stops()
    elif act=='del' and len(argv)==2:
        rpc.remove(argv[1])
    elif act=='add' and len(argv)>=2:
        if argv[1]=='--file':
            with open(argv[2],'r') as f:
                lines=[l.strip() for l in f.read().splitlines()]
            urls=[line for line in lines if len(line)>0]
            for url in urls: rpc.addUri([url])
            logging.info('download:%s',urls)
        else:
            rpc.addUri(argv[1:])
            logging.info('download:%s',argv[1:])

if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG, format='%(message)s')
    argv=sys.argv
    if len(argv)==1:
        logging.warn('need more params'); exit()
    action=argv[1]
    params=argv[2] if len(argv)>2 else None
    if 'ls'==action:
        status=int(params) if params else 10
        HttpTask.list(status)
    elif 'abort'==action:
        HttpTask.abort(int(params))
    elif 'del'==action:#back compatible
        HttpTask.remove(int(params))
    elif 'remove'==action:
        HttpTask.remove(int(params))
    elif 'aria'==action:
        aria2_rpc(argv[2:])
    elif re.match(r'.+\.upload$',action):
        upload(params,action)
    else:
        logging.info('unknow parameters:%s',argv)
        logging.info('only support the following commands')
        logging.info('rpc ls\nrpc del <taskid>\nrpc abort <taskid>')
        logging.info('********************************************')
        logging.info('rpc aria ls\nrpc aria add <url>')

